services:
  backend:
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy

    build:
      context: .
      dockerfile: cmd/server/Dockerfile.dev
    volumes:
      - .:/app
    container_name: shadershare_backend
    hostname: shadershare_backend
    ports:
      - 8080:8080
    deploy:
      restart_policy:
        condition: on-failure
    env_file: ".env"
    environment:
      - DATABASE_URL=postgres://postgres:password@db:5432/postgres?sslmode=disable
      - JWT_SECRET=739e03884297c1e8e976
      - AUTH_BASE_URL=${AUTH_BASE_URL}
      - OAUTH_SESSION_SECRET=random
      - ENVIRONMENT=dev
      - BASE_CLIENT_URL=${BASE_CLIENT_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - S3_BUCKET_NAME=dev-bucket
      - S3_ACCOUNT_ID=admin
      - AWS_ACCESS_KEY_ID=admin
      - AWS_ACCESS_KEY_SECRET=password
      - S3_ENDPOINT_URL=http://minio:9000
      - AWS_REGION=us-east-1
    networks:
      - localnet
  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9090:9090"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
    command: server /data --console-address ":9090"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - localnet

  db:
    image: postgres
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 10
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - localnet

  migrate: &basemigrate
    container_name: migrate
    profiles: ["tools"]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - localnet
    image: migrate/migrate
    entrypoint:
      ["migrate", "-path", "/migrations", "-database", "${DATABASE_URL}"]
    command: up
    links:
      - db
    volumes:
      - ./db/migrations:/migrations
    environment:
      - DATABASE_URL=postgres://postgres:password@db:5432/postgres?sslmode=disable

  migrate-create:
    <<: *basemigrate
    entrypoint: migrate create -dir /migrations -ext sql
    command: ""

  database-reset:
    <<: *basemigrate
    command: ["drop", "-f"]

volumes:
  minio_data:
  pgdata:
networks:
  localnet:
    driver: bridge
