services:
  backend:
    depends_on:
      db:
        condition: service_healthy
    build:
      context: .
      dockerfile: cmd/server/Dockerfile.dev
    volumes:
      - .:/app
    container_name: shadershare_backend
    hostname: shadershare_backend
    ports:
      - 8080:8080
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      - DATABASE_URL=postgres://postgres:password@db:5432/postgres?sslmode=disable
      - JWT_SECRET=739e03884297c1e8e976
      - ENVIRONMENT="dev"
    networks:
      - localnet
  db:
    image: postgres
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - localnet

  migrate: &basemigrate
    container_name: migrate
    profiles: ["tools"]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - localnet
    image: migrate/migrate
    entrypoint:
      ["migrate", "-path", "/migrations", "-database", "${DATABASE_URL}"]
    command: up
    links:
      - db
    volumes:
      - ./db/migrations:/migrations
    environment:
      - DATABASE_URL=postgres://postgres:password@db:5432/postgres?sslmode=disable
  migrate-create:
    <<: *basemigrate
    entrypoint: migrate create -dir /migrations -ext sql
    command: ""
  database-reset:
    <<: *basemigrate
    command: ["drop", "-f"]

volumes:
  pgdata:
networks:
  localnet:
    driver: bridge
