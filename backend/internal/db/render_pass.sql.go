// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: render_pass.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createRenderPass = `-- name: CreateRenderPass :one
INSERT INTO render_passes (
    shader_id, code, pass_index,name
) VALUES (
    $1, $2, $3, $4
) RETURNING id, shader_id, code, pass_index, name, created_at
`

type CreateRenderPassParams struct {
	ShaderID  uuid.UUID
	Code      string
	PassIndex int32
	Name      string
}

func (q *Queries) CreateRenderPass(ctx context.Context, arg CreateRenderPassParams) (RenderPass, error) {
	row := q.db.QueryRow(ctx, createRenderPass,
		arg.ShaderID,
		arg.Code,
		arg.PassIndex,
		arg.Name,
	)
	var i RenderPass
	err := row.Scan(
		&i.ID,
		&i.ShaderID,
		&i.Code,
		&i.PassIndex,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getRenderPass = `-- name: GetRenderPass :one
SELECT id, shader_id, code, pass_index, name, created_at FROM render_passes
WHERE id = $1
`

func (q *Queries) GetRenderPass(ctx context.Context, id uuid.UUID) (RenderPass, error) {
	row := q.db.QueryRow(ctx, getRenderPass, id)
	var i RenderPass
	err := row.Scan(
		&i.ID,
		&i.ShaderID,
		&i.Code,
		&i.PassIndex,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getRenderPassesByShaderID = `-- name: GetRenderPassesByShaderID :many
SELECT id, shader_id, code, pass_index, name, created_at FROM render_passes
WHERE shader_id = $1
`

func (q *Queries) GetRenderPassesByShaderID(ctx context.Context, shaderID uuid.UUID) ([]RenderPass, error) {
	rows, err := q.db.Query(ctx, getRenderPassesByShaderID, shaderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RenderPass
	for rows.Next() {
		var i RenderPass
		if err := rows.Scan(
			&i.ID,
			&i.ShaderID,
			&i.Code,
			&i.PassIndex,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRenderPasses = `-- name: ListRenderPasses :many
SELECT id, shader_id, code, pass_index, name, created_at FROM render_passes
ORDER BY id LIMIT $1 OFFSET $2
`

type ListRenderPassesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListRenderPasses(ctx context.Context, arg ListRenderPassesParams) ([]RenderPass, error) {
	rows, err := q.db.Query(ctx, listRenderPasses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RenderPass
	for rows.Next() {
		var i RenderPass
		if err := rows.Scan(
			&i.ID,
			&i.ShaderID,
			&i.Code,
			&i.PassIndex,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
